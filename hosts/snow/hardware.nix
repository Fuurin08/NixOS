# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "thunderbolt"
    "usbhid"
    "sdhci_pci"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  # NOTE:https://blog.decent.id/post/nixos-systemd-initrd/
  boot.initrd.systemd.enable = true;

  # fileSystems."/" = {
  #   device = "tmpfs";
  #   fsType = "tmpfs";
  #   options = [ "relatime"  "size=25%" "mode=755" ];
  # };

  # fileSystems."/nix" = {
  #   device = "";
  #   fsType = "btrfs";
  #   options = [ "subvol=@nix" "noatime"];
  # };

  # fileSystems."/persist" = {
  #   device = "";
  #   fsType = "btrfs";
  #   options = [ "subvol=@persist" ];
  #   neededForBoot = true;
  # };

  # fileSystems."/boot" = {
  #   device = "";
  #   fsType = "vfat";
  #   option = [ "fmask=0022" "dmask=0022" ]; 
  # };

  # swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  #networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
